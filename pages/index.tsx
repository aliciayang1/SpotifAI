// All of the code included in this repository was generated by AI. Both Abby and Alicia
// worked together to create and tailor each prompt that was given to ChatGPT in order to 
// produce the below code as well as combining ChatGPTs responses to make one fully-functioning
// React app.

import Head from 'next/head';
import { useState } from 'react';

// Interface for song object
interface Song {
  title: string;
  artist: string;
}

// Next.js page component
export default function Home() {
  const [poem, setPoem] = useState("");
  const [suggestedSongs, setSuggestedSongs] = useState<Song[]>([]);

  const handlePoemInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setPoem(e.target.value);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // Extract keywords from the poem and fetch suggested songs
    const extractedKeywords = await extractKeywords(poem);
    const suggestedSongs = await fetchSuggestedSongs(extractedKeywords);
    setSuggestedSongs(suggestedSongs);
  };

  return (
    <div className="container">
      <Head>
        <title>SpotifAI</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>SpotifAI</h1>
        <form onSubmit={handleSubmit}>
          <textarea
            className="poem-input"
            placeholder="Enter your poem here..."
            value={poem}
            onChange={handlePoemInputChange}
          />
          <button className="submit-btn" type="submit">Submit</button>
        </form>
        {suggestedSongs.length > 0 && (
          <div className="suggested-songs">
            <h2>Suggested songs:</h2>
            <ul>
              {suggestedSongs.map((song: Song) => (
                <li key={song.title}>
                  Title: {song.title}
                </li>
              ))}
            </ul>
          </div>
        )}
        <div className="watermark">Created by Alicia Yang and Abby Cohen</div> {/* Add watermark */}
      </main>

      <style jsx>{`
        .container {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          background-color: #000000; /* Update background color to black */
        }

        main {
          width: 100%;
          max-width: 500px;
          text-align: center;
        }

        h1 {
          font-size: 2rem;
          margin-bottom: 2rem;
          color: #1db954;
        }

        form {
          margin-bottom: 2rem;
        }

        .poem-input {
          width: 100%;
          height: 150px;
          padding: 1rem;
          font-size: 1rem;
          border: none;
          border-radius: 5px;
          resize: none;
        }

        .submit-btn {
          display: block;
          margin-top: 1rem;
          width: 100%;
          padding: 1rem;
          font-size: 1rem;
          font-weight: bold;
          color: #ffffff;
          background-color: #1db954;
          border: none;
          border-radius: 5px;
          cursor: pointer;
        }

        .submit-btn:hover {
          background-color: #1ed760;
        }

        .suggested-songs {
          margin-top: 2rem;
          color: #ffffff;
        }

        h2 {
          font-size: 1.5rem;
          margin-bottom: 1rem;
        }

        ul {
          list-style-type: none;
          padding: 0;
        }

        li {
          margin-bottom: 0.5rem;
        }

        body {
          margin: 0; /* Add this line to remove default margin */
        }

        .watermark {
          position: fixed;
          bottom: 0;
          left: 0;
          padding: 8px;
          font-size: 12px;
          color: #ffffff;
          background-color: rgba(0, 0, 0, 0.5);
        }

      `}</style>
    </div>
  );
}

// Function to extract keywords from poem
const extractKeywords = async (poem: string): Promise<string[]> => {
  // Add your implementation here
  // This function should extract keywords from the poem and return an array of strings
  // For example:
  const keywords = await performKeywordExtraction(poem);
  return keywords;
};

// Function to fetch suggested songs based on keywords
const fetchSuggestedSongs = async (keywords: string[]): Promise<Song[]> => {
  // Add your implementation here
  // This function should fetch suggested songs based on the keywords and return an array of Song objects
  // For example:
  const songs = await performSongSuggestion(keywords);
  // Map the fetched data to Song objects
  const suggestedSongs: Song[] = songs.map(song => ({ title: song, artist: '' }));
  return suggestedSongs;
};

// Function to perform keyword extraction from poem
const performKeywordExtraction = async (poem: string): Promise<string[]> => {
  // Add your implementation here
  // This function should perform keyword extraction from the given poem
  // and return an array of strings representing the extracted keywords

  // For example, you can use a natural language processing library or API
  // to tokenize and analyze the poem to extract keywords
  // Here's a simple example using string manipulation to extract words as keywords:

  // Remove special characters and convert to lowercase
  const cleanPoem = poem.replace(/[^\w\s]/gi, '').toLowerCase();
  // Split the poem into an array of words
  const words = cleanPoem.split(' ');
  // Filter out common stop words, such as "the", "and", etc.
  const stopWords = ['the', 'and', 'of', 'in', 'is', 'it', 'to', 'with', 'on', 'as'];
  const keywords = words.filter(word => !stopWords.includes(word));
  // Remove duplicates
  const uniqueKeywords = Array.from(new Set(keywords));
  return uniqueKeywords;
};

// Function to perform song suggestion based on keywords
const performSongSuggestion = async (keywords: string[]): Promise<string[]> => {
  // Add your implementation here
  // This function should perform song suggestion based on the extracted keywords
  // and return an array of strings representing the suggested songs

  // For example, you can use an external API or a music recommendation service
  // to fetch suggested songs based on the keywords
  // Here's a simple example using dummy data to return suggested songs:

  // Dummy data of suggested songs
  const suggestedSongs = [
    'Another Sad Love Song, Author: Khalid',
    'This Town, Author: Nial Horan',
    'All Too Well, Author: Taylor Swift',
    'i hate u, i love u, Author: gnash',
    'Potential Breakup Sing, Author: Aly & AJ',
  ];

  // Return the suggested songs
  return suggestedSongs;
};
